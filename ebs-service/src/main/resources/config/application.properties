
spring.profiles.active=dev
#spring.profiles.active=test
#spring.profiles.active=pro
#spring.profiles.active=qy



# 启用shutdown
management.endpoint.shutdown.enabled=true
# 表示后发现的bean会覆盖之前相同名称的bean
spring.main.allow-bean-definition-overriding=true

# 开启懒加载
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true




# thymeleaf
spring.thymeleaf.prefix: classpath:/templates/
spring.thymeleaf.suffix: .html

# 配置JSON时间格式
spring.jackson.date-format=com.outmao.ebs.common.configuration.web.DateFormatPlugin
spring.jackson.time-zone=GMT+8




# 配置文件存放位置
web.static-path=${config.file-path}static/

# 日志文件存放位置
logging.file.path=${config.file-path}logs/

# default /**
spring.mvc.static-path-pattern=/**
# default classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ 
spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:${web.static-path}


# 上传文件最大值
spring.servlet.multipart.max-file-size=200MB
# 单个请求的最大值
spring.servlet.multipart.max-request-size=200MB



##===数据库配置 开始===##
spring.datasource.url=jdbc:mysql://${config.server-name}:3306/ebs?useSSL=false
spring.datasource.username=root
spring.datasource.password=ybw108000
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#验证连接的有效性
spring.datasource.dbcp2.test-while-idle=true
#获取连接时候验证，会影响性能
spring.datasource.dbcp2.test-on-borrow=false
#在连接归还到连接池时是否测试该连接
spring.datasource.dbcp2.test-on-return=false
#验证连接的有效性
spring.datasource.dbcp2.validation-query=SELECT 1 FROM DUAL
#空闲连接回收的时间间隔，与test-while-idle一起使用，设置5分钟
spring.datasource.dbcp2.time-between-eviction-runs-millis=300000
#连接池空闲连接的有效时间 ，设置30分钟
spring.datasource.dbcp2.min-evictable-idle-time-millis=1800000
spring.datasource.dbcp2.initial-size=5
spring.datasource.dbcp2.max-idle=50
#指定连接池中最大的活跃连接数.
#spring.datasource.dbcp2.max-active=50
#指定连接池等待连接返回的最大等待时间，毫秒单位.
#spring.datasource.dbcp2.max-wait=60000
#指定必须保持连接的最小值
spring.datasource.dbcp2.min-idle=5

spring.jpa.database=MYSQL
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.open-in-view=true

##===数据库配置 结束===##



# 设置邮箱主机
spring.mail.host=smtp.qq.com
# 设置用户名
spring.mail.username=420577695@qq.com
# 设置密码，该处的密码是QQ邮箱开启SMTP的授权码而非QQ密码
spring.mail.password=ikftrwlehezhbgbh
# 设置是否需要认证，如果为true,那么用户名和密码就必须的，
# 如果设置false，可以不设置用户名和密码，当然也得看你的对接的平台是否支持无密码进行访问的。
spring.mail.properties.mail.smtp.auth=true
# STARTTLS[1]  是对纯文本通信协议的扩展。它提供一种方式将纯文本连接升级为加密连接（TLS或SSL），而不是另外使用一个端口作加密通信。
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true






# 短信服务配置
sms.active=ali
# --Ali短信服务配置--
sms.ali.access-key-id=LTAI5tG4QFmN1kewNaJ9MrGm
sms.ali.access-key-secret=IGDmbehCnJk1LSZK46CnHUNZ3NUj18
sms.ali.sign-name=\u5349\u4e70
#sms.ali.sign-name=\u91d1\u623f\u901a
# 验证码模板
sms.ali.templates.validate=SMS_227595157
# 收货提醒模板
sms.ali.templates.goods_remind=SMS_227735952
# --Juhe短信服务配置--
# 验证码模板
sms.juhe.templates.validate=12345

# Juhe配置
juhe.api=http://v.juhe.cn
juhe.key=8873e17b5b8a341359df2459f40c4e9f

# jisu配置
jisu.api=http://api.jisuapi.com
jisu.appkey=4bea1fdb17f3fd44

# 极光配置
jiguang.appkey=e65f3f132c621a7fa1e94af7
jiguang.mastersecret=91e0e9813cfb7fbc865db9cc




pay.wxpay.app-i-d=wxfd9961a4b5fc6321
pay.wxpay.mch-i-d=1516859921
pay.wxpay.sandbox-key=030c9a6dbd848b873162fd2da4bf1df5
pay.wxpay.key=030c9a6dbd848b873162fd2da4bf1df5
pay.wxpay.cert-path=${config.file-path}/wxcert/apiclient_cert.p12
pay.wxpay.notify-url=${config.base-url}/wxpay/notify
pay.wxpay.refund-notify-url=${config.base-url}/wxpay/refund_notify
pay.wxpay.use-sandbox=false



pay.wechatpay.api-v3-key=
pay.wechatpay.app-id=wxfd9961a4b5fc6321
pay.wechatpay.mch-id=1516859921
pay.wechatpay.merchant-id=1516859921
pay.wechatpay.merchant-serial-number=030c9a6dbd848b873162fd2da4bf1df5
pay.wechatpay.notify-url=${config.base-url}/wechatpay/notify
pay.wechatpay.private-key-path=${config.file-path}/wxcert/apiclient_cert.p12


shpanhe.ticket-api=http://localhost:9900